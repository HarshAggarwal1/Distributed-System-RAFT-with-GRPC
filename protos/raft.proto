syntax = "proto3";

package raft;

message LogEntry {
  int32 term = 1;
  string key = 2;
  string value = 3;
}

message AppendEntryRequest {
  optional int32 term = 1;
  optional string leader_id = 2;
  optional int32 prev_log_index = 3;
  optional int32 prev_log_term = 4;
  optional int32 type = 5;
  optional int32 leader_commit = 6;
  optional int64 lease_duration = 7;
  repeated LogEntry entry = 8;
}

message AppendEntryResponse {
  optional int32 term = 1;
  optional bool success = 2;
  optional string leader_id = 3;
}

message RequestVoteRequest {
  optional int32 term = 1;
  optional string candidate_id = 2;
  optional int32 last_log_index = 3;
  optional int32 last_log_term = 4;
  optional int64 old_leader_lease_duration = 5;
}

message RequestVoteResponse {
  optional int32 term = 1;
  optional bool vote_granted = 2;
  optional string leader_id = 3;
}

message ServeClientRequest {
  string type = 1;
  optional string key = 2;
  optional string value = 3;
  string address = 4;
}

message ServeClientResponse {
  optional string data = 1;
  optional string leader_id = 2;
  optional bool success = 3;
}

service RaftService {
  rpc AppendEntry(AppendEntryRequest) returns (AppendEntryResponse);
  rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse);
  rpc ServeClient(ServeClientRequest) returns (ServeClientResponse);
}
